public class PersonalTaskManagerRefactored {

    private static final String DB_FILE_PATH = "tasks_database.json";
    private static final DateTimeFormatter DATE_FORMATTER = DateTimeFormatter.ofPattern("yyyy-MM-dd");

    private JSONArray loadTasks() {
        JSONParser parser = new JSONParser();
        try (FileReader reader = new FileReader(DB_FILE_PATH)) {
            Object obj = parser.parse(reader);
            return (JSONArray) obj;
        } catch (Exception e) {
            return new JSONArray();
        }
    }

    private void saveTasks(JSONArray tasks) {
        try (FileWriter file = new FileWriter(DB_FILE_PATH)) {
            file.write(tasks.toJSONString());
        } catch (IOException e) {
            System.err.println("Lỗi khi ghi file: " + e.getMessage());
        }
    }

    private boolean isValidPriority(String priority) {
        return List.of("Thấp", "Trung bình", "Cao").contains(priority);
    }

    private boolean isDuplicateTask(JSONArray tasks, String title, LocalDate dueDate) {
        for (Object obj : tasks) {
            JSONObject task = (JSONObject) obj;
            if (task.get("title").toString().equalsIgnoreCase(title) &&
                task.get("due_date").equals(dueDate.format(DATE_FORMATTER))) {
                return true;
            }
        }
        return false;
    }

    private JSONObject createTask(String title, String description, LocalDate dueDate, String priority) {
        JSONObject task = new JSONObject();
        task.put("id", String.valueOf(System.currentTimeMillis()));
        task.put("title", title);
        task.put("description", description);
        task.put("due_date", dueDate.format(DATE_FORMATTER));
        task.put("priority", priority);
        task.put("status", "Chưa hoàn thành");
        String now = LocalDateTime.now().format(DateTimeFormatter.ISO_DATE_TIME);
        task.put("created_at", now);
        task.put("last_updated_at", now);
        return task;
    }

    public JSONObject addTask(String title, String description, String dueDateStr, String priority) {
        if (title == null || title.isBlank()) {
            System.out.println("Lỗi: Tiêu đề không hợp lệ.");
            return null;
        }

        LocalDate dueDate;
        try {
            dueDate = LocalDate.parse(dueDateStr, DATE_FORMATTER);
        } catch (DateTimeParseException e) {
            System.out.println("Lỗi: Ngày đến hạn sai định dạng.");
            return null;
        }

        if (!isValidPriority(priority)) {
            System.out.println("Lỗi: Mức độ ưu tiên không hợp lệ.");
            return null;
        }

        JSONArray tasks = loadTasks();
        if (isDuplicateTask(tasks, title, dueDate)) {
            System.out.println("Lỗi: Nhiệm vụ đã tồn tại.");
            return null;
        }

        JSONObject task = createTask(title, description, dueDate, priority);
        tasks.add(task);
saveTasks(tasks);

        System.out.println("Nhiệm vụ được thêm thành công!");
        return task;
    }

    public static void main(String[] args) {
        PersonalTaskManagerRefactored manager = new PersonalTaskManagerRefactored();
        manager.addTask("Mua sách", "Sách học", "2025-07-20", "Cao");
    }
}
